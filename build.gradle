// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        play_services_version = '10.2.6'

        android_build_sdk_version = 27
        android_build_tools_version = '28.0.0 rc2'
        android_build_target_sdk_version = 27
        android_build_min_sdk_version = 21

        android_build_target_compatibility = '1.8'
        android_build_source_compatibility = '1.8'
    }

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'

        //Dexcount gradle plugin
        //classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.4'
    }
}

static def computeVersionCode(int versionMajor, int versionMinor, int versionPatch, int versionBuild = 0){
    return versionMajor * 100000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
}

static def generateVersionName(String versionPrefix, int versionMajor, int versionMinor, int versionPatch, String versionSuffix = ""){
    def versionName = "${versionPrefix}${versionMajor}.${versionMinor}.${versionPatch}"

    if(versionSuffix != null && !versionSuffix.isEmpty() && versionSuffix != "release"){
        versionName += "-${versionSuffix}"
    }

    return versionName
}

static def generateVersionNameSuffix(int versionBuild, String releaseType, boolean includeHash = false){
    def versionNameSuffix = "${releaseType}.${versionBuild}"
    if(includeHash){
        versionNameSuffix += " (${getGitShortHash()})"
    }
    return versionNameSuffix
}

/**
 * @return The most recent git tag to be used as version name for the app.
 */
static def getGitVersion() {
    def cmd = "git describe --tag"
    try {
        def proc = cmd.execute()
        return proc.text.trim()
    } catch (IOException e) {
        //Unable to find 'git'
        return "please update version name manually"
    }
}

static def getGitShortHash() {
    def cmd = "git rev-parse --short HEAD"
    try{
        def proc = cmd.execute()
        return proc.text.trim()
    } catch(IOException e){
        //Unable to find git
        return ""
    }
}

def getMavenUsername(){
    return hasProperty('COM_O3DR_MAVEN_USERNAME') ? COM_O3DR_MAVEN_USERNAME : ''
}

def getMavenApiKey(){
    return hasProperty('COM_O3DR_MAVEN_APIKEY') ? COM_O3DR_MAVEN_APIKEY : ''
}

def getMavenRepo(){
    return hasProperty('COM_O3DR_MAVEN_REPO') ? COM_O3DR_MAVEN_REPO : ''
}

def getMavenRepoUrl(){
    return hasProperty('COM_O3DR_MAVEN_REPO_URL') ? COM_O3DR_MAVEN_REPO_URL : 'https://dl.bintray.com/3d-robotics/maven'
}

/**
 * Improve build server performance by allowing disabling of pre-dexing
 * (see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.)
 */
project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}


allprojects {

    tasks.withType(JavaCompile) {
        // applied on all projects
        sourceCompatibility = android_build_source_compatibility
        targetCompatibility = android_build_target_compatibility

        // Add javac compiler arguments here:
        // ----------------------------------
        //options.compilerArgs << "-Xlint:all" // Enable (nonstandard) warnings
        options.compilerArgs << "-verbose"
        // IMPORTANT - CERTAIN PARTS OF STARL NEED ACCESS TO THE JAVA 1.7 RUNTIME LIBRARY
        options.compilerArgs << "-bootclasspath" << "rt-1.7.jar"
        options.compilerArgs << "-bootclasspath" << "android.jar"
    }

    repositories {
        google()
        jcenter()

        maven {
            url getMavenRepoUrl()
            credentials {
                username getMavenUsername()
                password getMavenApiKey()
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
